import requests
import argparse
from packaging import version as packaging_version

def get_jenkins_version(url):
    try:
        response = requests.get(url)
        if 'X-Jenkins' in response.headers:
            return response.headers['X-Jenkins']
        else:
            return None
    except requests.RequestException as e:
        print(f"Error: {e}")
        return None

def is_version_in_range(version, ranges):
    v = packaging_version.parse(version)
    for start, end in ranges:
        if start and end:
            if packaging_version.parse(start) <= v < packaging_version.parse(end):
                return True
        elif start:
            if packaging_version.parse(start) <= v:
                return True
        elif end:
            if v < packaging_version.parse(end):
                return True
    return False

def is_vulnerable(version):
    # Define vulnerable version ranges
    core_vulnerable_ranges = [
        (None, "2.452.4"),
        ("2.460", "2.462.1"),
        ("2.470", "2.471")
    ]
    remoting_vulnerable_ranges = [
        (None, "3206.3208"),
        ("3248", "3248.3250"),
        ("3256", "3256.3258")
    ]
    
    return is_version_in_range(version, core_vulnerable_ranges) or is_version_in_range(version, remoting_vulnerable_ranges)

def check_vulnerability(url):
    version = get_jenkins_version(url)
    if version:
        if is_vulnerable(version):
            return f"[+] {url} (Jenkins Version: {version}) is potentially vulnerable."
        else:
            return f"[-] {url} (Jenkins Version: {version}) is not in the list of known vulnerable versions."
    else:
        return f"[-] {url} - Failed to retrieve Jenkins version or Jenkins is not running."

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check Jenkins instances for known vulnerabilities.")
    parser.add_argument("urls", metavar="URL", type=str, nargs="*", help="Jenkins instance URL(s) to check")
    parser.add_argument("-f", "--file", type=str, help="File containing Jenkins instance URLs to check")
    args = parser.parse_args()

    urls = args.urls

    if args.file:
        try:
            with open(args.file, 'r') as file:
                file_urls = [line.strip() for line in file if line.strip()]
                urls.extend(file_urls)
        except Exception as e:
            print(f"Error reading file: {e}")

    if not urls:
        print("No URLs provided. Please provide URLs as arguments or in a file.")
    else:
        for url in urls:
            print(check_vulnerability(url))
